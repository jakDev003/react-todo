{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todos","console","log","todos","map","key","headerStyle","textAlign","linkStyle","Header","to","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","placeholder","flex","className","App","axios","delete","then","res","filter","post","data","get","exact","path","render","Fragment","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.080da9f7.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { id, title } = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <input type=\"checkbox\" onChange={this.props.markComplete.bind\r\n                    (this, id)} /> {' '}\r\n                {title}\r\n                <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>x</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//Proptypes\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\n//Proptypes\r\nTodoItem.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoItem","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n    markComplete = () => {\r\n        console.log('Hello');\r\n    }\r\n\r\n    render() {\r\n\r\n        return this.props.todos.map((todo) => (\r\n            <TodoItem key={todo.id} todo={todo}\r\n                markComplete={this.props.markComplete}\r\n                delTodo={this.props.delTodo} />\r\n        ));\r\n    }\r\n\r\n}\r\n\r\n//Proptypes\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1>TodoList</h1>\r\n      <Link style={linkStyle} to=\"/home\">\r\n        Home\r\n      </Link>{\" \"}\r\n    </header>\r\n  );\r\n}\r\n\r\nconst headerStyle = {\r\n  background: \"#333\",\r\n  color: \"#fff\",\r\n  textAlign: \"center\",\r\n  padding: \"10px\",\r\n};\r\n\r\nconst linkStyle = {\r\n  color: \"#fff\",\r\n  textDecoration: \"none\",\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class AddTodo extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: '' });\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{ display: 'flex' }}>\r\n                <input\r\n                    type='text'\r\n                    name='title'\r\n                    placeholder='Add Todo...'\r\n                    style={{ flex: '10', padding: '5px' }}\r\n                    value={this.state.title}\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    type='submit'\r\n                    value='submit'\r\n                    className='btn'\r\n                    style={{ flex: '1' }}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n//Proptypes\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\r\nimport Todos from './components/Todos';\r\nimport Header from './components/layout/Header';\r\nimport AddTodo from './components/AddTodo';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todos: [\r\n\r\n    ]\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\r\n      .then(res => this.setState({ todos: res.data }))\r\n  }\r\n\r\n  // Toggle Complete\r\n  markComplete = (id) => {\r\n    this.setState({\r\n      todos: this.state.todos.map(todo => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed\r\n        }\r\n        return todo;\r\n      })\r\n    });\r\n  }\r\n\r\n  // Delete Todo\r\n  delTodo = (id) => {\r\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\r\n      .then(res => this.setState({\r\n        todos: [...this.state.todos.filter(todo => todo.id\r\n          !== id)]\r\n      }));\r\n  }\r\n\r\n  // Add Todo\r\n  addTodo = (title) => {\r\n    axios.post('https://jsonplaceholder.typicode.com/todos', {\r\n      title,\r\n      completed: false\r\n    })\r\n      .then(res => this.setState({\r\n        todos:\r\n          [...this.state.todos, res.data]\r\n      }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <div className='container'>\r\n            <Header />\r\n            <Switch>\r\n              <Route exact path=\"/react-todo/\"><Redirect to=\"/react-todo/home\" /></Route>\r\n              <Route exact path=\"/react-todo/home\" render={props => (\r\n                <React.Fragment>\r\n                  <AddTodo addTodo={this.addTodo} />\r\n                  <Todos todos={this.state.todos}\r\n                    markComplete={this.markComplete}\r\n                    delTodo={this.delTodo} />\r\n                </React.Fragment>\r\n              )} />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}